{"Board":{"code":"0x6060604081815280610553833960a0905251608051600281905560018054600160a060020a03199081163317909155600080549091168317815560a0819052600381905560e060405260c081905260055550506104f3806100606000396000f3606060405236156100825760e060020a600035046306dc1901811461008457806317d7de7c1461010c57806340731c2414610116578063421b2d8b146101445780635a9b0b891461016a57806383197ef0146101ab578063893d20e8146101d357806398575188146101e7578063b0467deb14610211578063d091ec3114610237575b005b6102616004356024356001546000908190600160a060020a03908116339190911614156102c3575b6005548110156102c357600081815260066020526040902054600160a060020a0390811690851614156102cf576003805460009081526004602052604090208054600160a060020a031916851790558054600190810190915591506102c8565b6102616002545b90565b6102736004356003546000908210156102925781815260046020526040902054600160a060020a0316610296565b610261600435600154600090600160a060020a039081163391909116146103d257610296565b60035460055460005460025460408051600160a060020a03939093168352602083019190915281810193909352606081019190915290519081900360800190f35b6001546100829033600160a060020a0390811691161461029057600054600160a060020a0316ff5b610273600054600160a060020a0316610113565b61026160043560015460009081908190600160a060020a03908116339190911614610404576102dc565b610273600435600154600090600160a060020a0390811633919091161461029b57610296565b61026160043560015460009081908190600160a060020a039081163391909116146102e3576102dc565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b565b5060005b919050565b6005548210156102925750600081815260066020526040902054600160a060020a0316610296565b600091505b5092915050565b6001016100ac565b600092505b5050919050565b600091505b6003548210156102d757600082815260046020526040902054600160a060020a0385811691161415610340576003546000190182141561034c5760406000908120908390528054600160a060020a03191690556103bf565b600191909101906102e8565b50600181015b60035481101561039b57600081815260046020526040808220546000198401835291208054600160a060020a031916600160a060020a0392909216919091179055600101610352565b6003546000190160009081526004602052604090208054600160a060020a03191690555b60038054600019019055600192506102dc565b506005805460009081526006602052604090208054600160a060020a0319168317905580546001908101909155610296565b600091505b6005548210156102d757600082815260066020526040902054600160a060020a0385811691161415610461576005546000190182141561046d5760406000908120908390528054600160a060020a03191690556104e0565b60019190910190610409565b50600181015b6005548110156104bc57600081815260066020526040808220546000198401835291208054600160a060020a031916600160a060020a0392909216919091179055600101610473565b6005546000190160009081526006602052604090208054600160a060020a03191690555b60058054600019019055600192506102dc56","info":{"source":"contract Post {\n\n    address private owner;\n    address private author;\n    address private index;\n    address private board;\n    bytes32 private title;\n    bytes32 private image;\n    Comments private comments;\n    mapping (uint => bytes32) private content;\n    uint private block;\n    uint private number;\n    aArray private up;\n    aArray private down;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    struct Comments {\n        uint size;\n        mapping (uint => Comment) array;\n    }\n\n    struct Comment {\n        address user;\n        uint block;\n        bytes32 t1;\n        bytes32 t2;\n        bytes32 t3;\n    }\n\n    function Post(address _owner, address _author, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) {\n        owner = address(_owner);\n        author = address(_author);\n        index = address(msg.sender);\n        board = address(_board);\n        title = _title;\n        image = _image;\n        content[0] = c1;\n        content[1] = c2;\n        content[2] = c3;\n        content[3] = c4;\n        content[4] = c5;\n        content[5] = c6;\n        content[6] = c7;\n        content[7] = c8;\n        comments = Comments(0);\n        up = aArray(0);\n        down = aArray(0);\n    }\n\n    function setIds(uint _number, uint _block){\n        number = _number;\n        block = _block;\n    }\n\n    function getData() constant returns (address, address, bytes32, bytes32, uint, uint, uint, uint, uint) {\n        return (owner, board, title, image, comments.size, up.size, down.size, block, number);\n    }\n\n    function getContent() constant returns (bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32) {\n        return (content[0], content[1], content[2], content[3], content[4], content[5], content[6], content[7]);\n    }\n\n    function getBoard() constant returns (address) {\n        return board;\n    }\n\n    function getComment(uint index) constant returns (address, uint, bytes32, bytes32, bytes32) {\n        if (index < comments.size)\n            return (comments.array[index].user, comments.array[index].block, comments.array[index].t1, comments.array[index].t2, comments.array[index].t3);\n        return( 0x0, 0, \"\", \"\", \"\");\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function addComment(address _user, uint _block, bytes32 _t1, bytes32 _t2, bytes32 _t3) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        comments.array[comments.size] = Comment({\n            user : _user,\n            block : _block,\n            t1 : _t1,\n            t2 : _t2,\n            t3 : _t3\n        });\n        comments.size ++;\n        return true;\n    }\n\n    function giveUp(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address)\n                return false;\n        for(i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address){\n                if (i == (up.size-1)){\n                    delete up.array[i];\n                } else {\n                    for(uint z = i; z < up.size; z ++)\n                        up.array[z] = up.array[z+1];\n                    delete up.array[up.size-1];\n                }\n                up.size --;\n                return true;\n            }\n        up.array[up.size] = user_address;\n        up.size ++;\n        return true;\n    }\n\n    function giveDown(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address)\n                return false;\n        for(i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address){\n                if (i == (down.size-1)){\n                    delete down.array[i];\n                } else {\n                    for(uint z = i; z < down.size; z ++)\n                        down.array[z] = down.array[z+1];\n                    delete down.array[down.size-1];\n                }\n                down.size --;\n                return true;\n            }\n        down.array[down.size] = user_address;\n        down.size ++;\n        return true;\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n}\n\ncontract Board {\n\n    address private owner;\n    address private index;\n    bytes32 private name;\n    aArray private posts;\n    aArray private users;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function Board(address _owner, bytes32 _name) {\n        name = _name;\n        index = msg.sender;\n        owner = _owner;\n        posts = aArray(0);\n        users = aArray(0);\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getName() constant returns (bytes32) {\n        return name;\n    }\n\n    function getInfo() constant returns (address, bytes32, uint, uint) {\n        return (owner, name, posts.size, users.size);\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function getUser(uint i) constant returns (address) {\n        if (index != address(msg.sender))\n            return 0x0;\n        if (i < users.size)\n            return (users.array[i]);\n        return 0x0;\n    }\n\n    function addPostOnBoard(address _user, address post_address) constant returns (bool)  {\n        if (index == address(msg.sender))\n            for( uint i = 0; i < users.size; i ++)\n                if (users.array[i] == address(_user)){\n                    posts.array[posts.size] = address(post_address);\n                    posts.size ++;\n                    return true;\n                }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i + 1; z < posts.size; z ++)\n                        posts.array[z-1] = posts.array[z];\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addUser(address new_user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        users.array[users.size] = new_user_address;\n        users.size ++;\n        return true;\n    }\n\n    function removeUser(address user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < users.size; i ++)\n            if (users.array[i] == user_address) {\n                if (i == (users.size-1))\n                    delete users.array[i];\n                else {\n                    for( uint z = i + 1; z < users.size; z ++)\n                        users.array[z-1] = users.array[z];\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n}\n\ncontract User {\n\n    address private owner;\n    address private index;\n    bytes32 private email;\n    bytes32 private username;\n    bytes32 private name;\n    bytes32 private imageurl;\n    bytes10 private birth;\n    bytes32 private location;\n    bytes32 private url1;\n    bytes32 private url2;\n    aArray private boards;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function User(address _owner, bytes32 _username) {\n        owner = address(_owner);\n        index = address(msg.sender);\n        username = _username;\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function edit(address _owner, bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) constant returns ( bool ) {\n        if ((owner != _owner) || (index != address(msg.sender)))\n            return false;\n        name = _name;\n        email = _email;\n        imageurl = _imageurl;\n        birth = _birth;\n        location = _location;\n        url1 = _url1;\n        url2 = _url2;\n        return true;\n    }\n\n    function addBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for(uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address)\n                return false;\n        boards.array[boards.size] = board_address;\n        boards.size ++;\n        return true;\n    }\n\n    function getBoard(uint i) constant returns (address) {\n        if (i < boards.size)\n            return (boards.array[i]);\n        return 0x0;\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address) {\n                if (i == (boards.size-1)){\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    delete boards.array[boards.size-1];\n                }\n                boards.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addPostOnUser(address post_address) constant returns (bool) {\n        if (index == address(msg.sender)){\n            posts.array[posts.size] = address(post_address);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    Post(posts.array[i]).destroy();\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i; z < posts.size; z ++)\n                        posts.array[z] = posts.array[z+1];\n                    Post(posts.array[posts.size-1]).destroy();\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function destroy () {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getUsername() constant returns (bytes32) {\n        return username;\n    }\n\n    function getData() constant returns (address, bytes32, bytes32, uint, uint) {\n        return (address(this), username, name, uint(boards.size), uint(posts.size));\n    }\n\n    function getProfile() constant returns (address, bytes32, bytes32, bytes32, bytes32, bytes10, bytes32, bytes32, bytes32) {\n        return (address(this), username, name, email, location, birth, imageurl, url1, url2);\n    }\n\n    function getOwner() constant returns (address) {\n        return owner;\n    }\n\n}\n\ncontract OpenContentIndex {\n\n    bytes32 constant version = \"0.1.1\";\n\n    aArray private boards;\n    aArray private users;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    event log (bytes32 message);\n    event logAddress (address message);\n    event logInt (uint message);\n\n    function OpenContentIndex() {\n        users = aArray(0);\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function getIndexInfo()constant returns (bytes32, uint, uint, uint) {\n        return (version, users.size, boards.size, posts.size);\n    }\n\n/*--------------------------------------------- TAGS ---------------------------------------------*/\n\n    function createBoard( bytes32 new_board_name ) constant returns (bool) {\n        for( uint i = 0; i < boards.size; i ++)\n            if (Board(boards.array[i]).getName() == bytes32(new_board_name))\n                return false;\n        for(uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin)){\n                Board newBoard = new Board(address(tx.origin), new_board_name);\n                newBoard.addUser(User(users.array[z]));\n                boards.array[boards.size] = address(newBoard);\n                boards.size ++;\n                User(users.array[z]).addBoard(address(newBoard));\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (address(tx.origin) != Board(board_address).getOwner())\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address){\n                if (i == (boards.size-1)){\n                    Board(boards.array[i]).destroy();\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    Board(boards.array[boards.size-1]).destroy();\n                    delete boards.array[boards.size-1];\n                }\n                for(i = 0; i < users.size; i ++)\n                    if (User(users.array[i]).getOwner() == address(tx.origin)){\n                        Board(board_address).removeUser(User(users.array[i]));\n                        User(users.array[i]).removeBoard(board_address);\n                        boards.size --;\n                        return true;\n                    }\n            }\n        return false;\n    }\n\n    function getBoardInfo(address board_address) constant returns (address, bytes32, uint, uint) {\n        for( uint i = 0; i < boards.size; i ++)\n            if ( address(boards.array[i]) == board_address )\n                return Board(boards.array[i]).getInfo();\n        return (0x0, \"\", 0, 0);\n    }\n\n/*--------------------------------------------- USERS ---------------------------------------------*/\n\n    function createUser(bytes32 _username) constant returns (bool){\n        for( uint i = 0; i < users.size; i ++)\n            if ((User(users.array[i]).getUsername() == _username) || (User(users.array[i]).getOwner() == address(tx.origin)))\n                return false;\n        users.array[users.size] = new User(address(tx.origin), _username);\n        users.size ++;\n        return true;\n    }\n\n    function editUser(bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)) {\n                User(users.array[i]).edit(address(tx.origin), _name, _email, _imageurl, _birth, _location, _url1, _url2);\n                return true;\n            }\n        return false;\n    }\n\n    function addBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).addUser(User(users.array[i]));\n                User(users.array[i]).addBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).removeUser(User(users.array[i]));\n                User(users.array[i]).removeBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeUser() constant returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                if (i == (users.size-1)){\n                    User(users.array[i]).destroy();\n                    delete users.array[i];\n                } else {\n                    for( uint z = i; z < users.size; z ++)\n                        users.array[z] = users.array[z+1];\n                    User(users.array[users.size-1]).destroy();\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function getUserByUsername(bytes32 _username) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getUsername() == _username)\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n    function getUserByAddress(address _owner) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if ( User(users.array[i]).getOwner() == _owner )\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n/*--------------------------------------------- POSTS ---------------------------------------------*/\n\n    function getHomePost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return posts.array[i];\n        return (0x0);\n    }\n\n    function addComment(address post_address, bytes32 t1, bytes32 t2, bytes32 t3) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).addComment(address(tx.origin), block.number, t1, t2, t3);\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveUp(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveUp(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveDown(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveDown(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function createPost(address _user, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) returns (bool) {\n        if (User(address(_user)).getOwner() == address(tx.origin)){\n            Post newPost = new Post(address(tx.origin), address(_user), _board, _title, _image, c1, c2, c3, c4, c5, c6, c7, c8);\n            Board(address(_board)).addPostOnBoard(address(_user), address(newPost));\n            Post(address(newPost)).setIds(posts.size, block.number);\n            User(address(_user)).addPostOnUser(address(newPost));\n            posts.array[posts.size] = address(newPost);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) returns (bool) {\n        for( uint i = 0; i < posts.size; i ++)\n            if ((posts.array[i] == post_address) && (Post(posts.array[i]).getOwner() == address(tx.origin)) )\n                for( uint z = 0; z < users.size; z ++)\n                    if (User(users.array[z]).getOwner() == address(tx.origin)){\n                        Board(Post(posts.array[i]).getBoard()).removePost(post_address);\n                        User(users.array[z]).removePost(post_address);\n                        if (i == (posts.size-1)){\n                            delete posts.array[i];\n                        } else {\n                            for(z = i; z < posts.size; z ++)\n                                posts.array[z] = posts.array[z+1];\n                            delete posts.array[posts.size-1];\n                        }\n                        posts.size --;\n                        return true;\n                    }\n        return false;\n    }\n\n}\n","language":"Solidity","languageVersion":"0.3.0","compilerVersion":"0.3.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /tmp/solc657640558","abiDefinition":[{"constant":true,"inputs":[{"name":"_user","type":"address"},{"name":"post_address","type":"address"}],"name":"addPostOnBoard","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"getName","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"getPost","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"new_user_address","type":"address"}],"name":"addUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"getInfo","outputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"user_address","type":"address"}],"name":"removeUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"getUser","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"post_address","type":"address"}],"name":"removePost","outputs":[{"name":"","type":"bool"}],"type":"function"},{"inputs":[{"name":"_owner","type":"address"},{"name":"_name","type":"bytes32"}],"type":"constructor"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"OpenContentIndex":{"code":"0x6060604052600060608190526002819055608081905280805560c060405260a081905260045561317c806100336000396000f3606060405236156100cf5760e060020a6000350463117968c481146100d157806324968a7014610199578063568f910d146101c757806369c212f6146104305780639017dcfc146104ea578063957f13f41461063a578063abf7bfd81461069f578063b1e4e684146107ad578063b2bb72bf146108d9578063c0373e2c1461092a578063c48ab0f114610ab7578063d091ec3114610be3578063ec3adf6514610ea1578063f755a76e14610ff2578063f944f4c71461108c578063fe2da970146111bb578063fe4231651461126b575b005b6113f76004356000808080805b6000548110156119d357600081815260016020526040902054600160a060020a03878116911614156119e957604060008181205483825282517f5a9b0b890000000000000000000000000000000000000000000000000000000081529251600160a060020a039190911692635a9b0b8992600482810193608093909290839003909101908290876161da5a03f11561000257505060408051805160208201519282015160609290920151909850919650945092506119e19050565b611428600435600454600090821015611b965781815260056020526040902054600160a060020a0316611b9a565b61144560043560243560443560643560843560a43560c43560e435610104356101243561014435610164356000600032600160a060020a03168e600160a060020a031663893d20e86040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151600160a060020a0316909114159050611bea57328e8e8e8e8e8e8e8e8e8e8e8e60405161088a806128f2833901808e600160a060020a031681526020018d600160a060020a031681526020018c600160a060020a031681526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019d5050505050505050505050505050604051809103906000f090508c600160a060020a03166306dc19018f836040518360e060020a0281526004018083600160a060020a0316815260200182600160a060020a03168152602001925050506020604051808303816000876161da5a03f11561000257505060408051600480547f8628aca9000000000000000000000000000000000000000000000000000000008352908201524360248201529051600160a060020a0384169250638628aca9916044818101928792909190829003018183876161da5a03f115610002575050508d600160a060020a031663585e554e826040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f115610002575050600480548452600560205260409093208054600160a060020a031916831790555081546001908101909255611bef565b6114286004356000805b600254811015611a7d57600081815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a038881169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a031691909114159050611b8e576002600050600101600050600082815260200190815260200160002060009054906101000a9004600160a060020a03169150611a56565b611445600435602435604435606435600080805b600254821015611b9f57600082815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611bae575060005b600454811015611bae57600081815260056020526040902054600160a060020a0388811691161415611bba5760406000818120838252825190547fee4d9402000000000000000000000000000000000000000000000000000000008252600160a060020a033281166004840152436024840152604483018b9052606483018a905260848301899052935193169263ee4d94029260a4808401936020939290839003909101908290876161da5a03f115610002575060019450611ba4915050565b61144560043560006000600083600160a060020a031663893d20e86040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151600160a060020a03908116329091161490506116a25761169b565b6114456004356000805b6002548110156119f157600081815260036020908152604080832054815160e060020a63681f3e6d02815291518794600160a060020a03929092169363681f3e6d936004818101949293929183900301908290876161da5a03f1156100025750506040515190911490508061079f575032600160a060020a03166002600050600101600050600083815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031663893d20e86040518160e060020a0281526004018090506020604051808303816000876161da5a03f11561000257505060405151600160a060020a031690911490505b15611a5c5760009150611a56565b611445600435600080805b60025482101561169657600082815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611bc2575060005b600454811015611bc257600081815260056020526040902054600160a060020a0385811691161415611bce5760406000818120838252825190547fb1e4e684000000000000000000000000000000000000000000000000000000008252600160a060020a033281166004840152935193169263b1e4e684926024838101936020939290839003909101908290876161da5a03f11561000257506001945061169b915050565b6004546002546000547f302e312e3100000000000000000000000000000000000000000000000000000092604080519485526020850193909352838301919091526060830152519081900360800190f35b6114456004356000805b600254811015611a7d57600081815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611a865782600160a060020a031663421b2d8b6002600050600101600050600084815260200190815260200160002060009054906101000a9004600160a060020a03166040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f1156100025750505060405180519060200150506002600050600101600050600082815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a03166310a1c573846040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f115610002575060019350611a56915050565b611445600435600080805b60025482101561169657600082815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611bd6575060005b600454811015611bd657600081815260056020526040902054600160a060020a0385811691161415611be25760406000818120838252825190547fc48ab0f1000000000000000000000000000000000000000000000000000000008252600160a060020a033281166004840152935193169263c48ab0f1926024838101936020939290839003909101908290876161da5a03f11561000257506001945061169b915050565b611445600435600080805b60045482101561169657600082815260056020526040902054600160a060020a038581169116148015610c825750604060008181208482528251905460e360020a631127a41d0282529251600160a060020a0332811694169263893d20e8926004818101936020939092839003909101908290876161da5a03f11561000257505060405151600160a060020a031690911490505b15611c00575060005b600254811015611c0057600081815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611c0c5760008281526005602090815260408051818420547f3264a34b0000000000000000000000000000000000000000000000000000000082529151600160a060020a039290921693633264a34b93600483810194919391929183900301908290876161da5a03f1156100025750506040805180517fd091ec31000000000000000000000000000000000000000000000000000000008252600160a060020a03888116600484015292519216925063d091ec3191602482810192602092919082900301816000876161da5a03f1156100025750505060405180519060200150506002600050600101600050600082815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031663d091ec31856040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f115610002575050600454600019018314159050611c14576004600050600101600050600083815260200190815260200160002060006101000a815490600160a060020a030219169055611c84565b61144560043560243560443560643560843560a43560c4356000805b600254811015611a6457600081815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611a75576002600050600101600050600082815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031663e8a481bd328b8b8b8b8b8b8b6040518960e060020a0281526004018089600160a060020a03168152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506020604051808303816000876161da5a03f115610002575060019350611a69915050565b61144560043560008080805b6000548310156114645760008381526001602090815260408083205481517f17d7de7c00000000000000000000000000000000000000000000000000000000815291518994600160a060020a0392909216936317d7de7c936004818101949293929183900301908290876161da5a03f1156100025750506040515190911415905061167e576000935061145c565b611445600080805b600254821015611a9657600082815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611aa05760025460001901821415611aac576002600050600101600050600083815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a03166383197ef06040518160e060020a0281526004018090506000604051808303816000876161da5a03f115610002575050506002600050600101600050600083815260200190815260200160002060006101000a815490600160a060020a030219169055611b73565b6114286004356000805b600254811015611a7d57600081815260036020908152604080518184205460e060020a63681f3e6d02825291518794600160a060020a03939093169363681f3e6d9360048481019492939283900301908290876161da5a03f1156100025750506040515191909114159050611b86576002600050600101600050600082815260200190815260200160002060009054906101000a9004600160a060020a03169150611a56565b6114456004356000805b600254811015611a7d57600081815260036020908152604080518184205460e360020a631127a41d0282529151600160a060020a033281169593169363893d20e89360048481019492939283900301908290876161da5a03f11561000257505060405151600160a060020a0316909114159050611a8e5782600160a060020a031663985751886002600050600101600050600084815260200190815260200160002060009054906101000a9004600160a060020a03166040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f1156100025750505060405180519060200150506002600050600101600050600082815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031663957f13f4846040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f115610002575060019350611a56915050565b60408051600160a060020a039590951685526020850193909352838301919091526060830152519081900360800190f35b60408051600160a060020a03929092168252519081900360200190f35b60408051918252519081900360200190f35b600093505b505050919050565b600091505b60025482101561145757600082815260036020908152604080832054815160e360020a631127a41d0281529151600160a060020a033281169592169363893d20e8936004818101949293929183900301908290876161da5a03f11561000257505060405151600160a060020a031690911415905061168a57328560405161055380611c978339018083600160a060020a0316815260200182815260200192505050604051809103906000f0905080600160a060020a031663421b2d8b6002600050600101600050600085815260200190815260200160002060009054906101000a9004600160a060020a03166040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f1156100025750505060405180519060200150508060006000506001016000506000600060005060000160005054815260200190815260200160002060006101000a815481600160a060020a030219169083021790555060006000506000016000818150548092919060010191905055506002600050600101600050600083815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a03166310a1c573826040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f11561000257506001955061145c915050565b60019290920191610ffe565b60019190910190611469565b600092505b5050919050565b600091505b60005482101561169657600082815260016020526040902054600160a060020a0390811690851614156119bb576000546000190182141561176757604060008181208482528251905460e460020a63083197ef0282529251600160a060020a0393909316926383197ef092600483810193919291829003018183876161da5a03f115610002575050506000600050600101600050600083815260200190815260200160002060006101000a815490600160a060020a03021916905561182b565b50805b6000548110156117b5576001818101600090815260209190915260408082205483835291208054600160a060020a031916600160a060020a039290921691909117905560010161176a565b600080546000190181526001602052604080518183205460e460020a63083197ef0282529151600160a060020a0392909216926383197ef092600483810193829003018183876161da5a03f115610002575050600080546000190181526001602052604090208054600160a060020a0319169055505b600091505b6002548210156119bb57600082815260036020908152604080518184205460e360020a631127a41d0282529151600160a060020a033281169593169363893d20e89360048481019492939283900301908290876161da5a03f11561000257505060405151600160a060020a03169091141590506119c75783600160a060020a031663985751886002600050600101600050600085815260200190815260200160002060009054906101000a9004600160a060020a03166040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f1156100025750505060405180519060200150506002600050600101600050600083815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a031663957f13f4856040518260e060020a0281526004018082600160a060020a031681526020019150506020604051808303816000876161da5a03f11561000257505060008054600019019055506001925061169b565b600191909101906116a7565b60019190910190611830565b600094508493508392508291505b509193509193565b6001016100de565b3283604051610708806121ea8339018083600160a060020a0316815260200182815260200192505050604051809103906000f06002805460009081526003602052604090208054600160a060020a031916929092179091558054600190810190915591505b50919050565b6001016106a9565b600091505b50979650505050505050565b600101610ebd565b60009150611a56565b600101610934565b600101611275565b600092505b505090565b60019190910190611094565b50805b600254811015611af857600181016000908152600360205260408082205483835291208054600160a060020a031916600160a060020a0392909216919091179055600101611aaf565b6002546000190160009081526003602052604080822054815160e460020a63083197ef0281529151600160a060020a0391909116926383197ef09260048181019391829003018183876161da5a03f1156100025750506002546000190160009081526003602052604090208054600160a060020a0319169055505b6002805460001901905560019250611a9b565b6001016111c5565b60010161043a565b5060005b919050565b600092505b5050949350505050565b600191909101906104fe565b60010161057a565b600191909101906107b8565b600101610834565b60019190910190610ac2565b600101610b3e565b600091505b509c9b505050505050505050505050565b60019190910190610bee565b600101610c8b565b50805b600454811015611c6057600181016000908152600560205260408082205483835291208054600160a060020a031916600160a060020a0392909216919091179055600101611c17565b6004546000190160009081526005602052604090208054600160a060020a03191690555b600480546000190190556001925061169b566060604081815280610553833960a0905251608051600281905560018054600160a060020a03199081163317909155600080549091168317815560a0819052600381905560e060405260c081905260055550506104f3806100606000396000f3606060405236156100825760e060020a600035046306dc1901811461008457806317d7de7c1461010c57806340731c2414610116578063421b2d8b146101445780635a9b0b891461016a57806383197ef0146101ab578063893d20e8146101d357806398575188146101e7578063b0467deb14610211578063d091ec3114610237575b005b6102616004356024356001546000908190600160a060020a03908116339190911614156102c3575b6005548110156102c357600081815260066020526040902054600160a060020a0390811690851614156102cf576003805460009081526004602052604090208054600160a060020a031916851790558054600190810190915591506102c8565b6102616002545b90565b6102736004356003546000908210156102925781815260046020526040902054600160a060020a0316610296565b610261600435600154600090600160a060020a039081163391909116146103d257610296565b60035460055460005460025460408051600160a060020a03939093168352602083019190915281810193909352606081019190915290519081900360800190f35b6001546100829033600160a060020a0390811691161461029057600054600160a060020a0316ff5b610273600054600160a060020a0316610113565b61026160043560015460009081908190600160a060020a03908116339190911614610404576102dc565b610273600435600154600090600160a060020a0390811633919091161461029b57610296565b61026160043560015460009081908190600160a060020a039081163391909116146102e3576102dc565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b565b5060005b919050565b6005548210156102925750600081815260066020526040902054600160a060020a0316610296565b600091505b5092915050565b6001016100ac565b600092505b5050919050565b600091505b6003548210156102d757600082815260046020526040902054600160a060020a0385811691161415610340576003546000190182141561034c5760406000908120908390528054600160a060020a03191690556103bf565b600191909101906102e8565b50600181015b60035481101561039b57600081815260046020526040808220546000198401835291208054600160a060020a031916600160a060020a0392909216919091179055600101610352565b6003546000190160009081526004602052604090208054600160a060020a03191690555b60038054600019019055600192506102dc565b506005805460009081526006602052604090208054600160a060020a0319168317905580546001908101909155610296565b600091505b6005548210156102d757600082815260066020526040902054600160a060020a0385811691161415610461576005546000190182141561046d5760406000908120908390528054600160a060020a03191690556104e0565b60019190910190610409565b50600181015b6005548110156104bc57600081815260066020526040808220546000198401835291208054600160a060020a031916600160a060020a0392909216919091179055600101610473565b6005546000190160009081526006602052604090208054600160a060020a03191690555b60058054600019019055600192506102dc566060604081815280610708833960a090525160805160008054600160a060020a0319908116841782556001805490911633179055600382905560a0819052600a81905560e060405260c0819052600c5550506106a98061005f6000396000f3606060405236156100985760e060020a600035046310a1c573811461009a5780633bc5de30146100c157806340731c241461010857806345e09e5414610136578063585e554e14610164578063681f3e6d146101b457806383197ef0146101be578063893d20e8146101e6578063957f13f4146101fa578063d091ec3114610223578063d6afc9b11461024c578063e8a481bd146102bd575b005b6103126004356001546000908190600160a060020a0390811633909116146103c1576103bb565b600a54600c546003546004546040805130600160a060020a031681526020810193909352828101919091526060820193909352608081019190915290519081900360a00190f35b610324600435600c5460009082101561040257818152600d6020526040902054600160a060020a0316610406565b610324600435600a5460009082101561040257818152600b6020526040902054600160a060020a0316610406565b610312600435600154600090600160a060020a0390811633909116141561040257600c80548252600d60205260409091208054600160a060020a0319168317905580546001908101909155610406565b6103126003545b90565b610098600154600160a060020a0390811633909116146106a757600054600160a060020a0316ff5b610324600054600160a060020a03166101bb565b61031260043560015460009081908190600160a060020a03908116339091161461041757610410565b61031260043560015460009081908190600160a060020a03908116339091161461050157610410565b6003546004546002546007546006546005546008546009546040805130600160a060020a031681526020810199909952888101979097526060880195909552608087019390935260b060020a9190910260a086015260c085015260e084015261010083015251908190036101200190f35b61031260043560243560443560643560843560a43560c43560e43560008054600160a060020a038a81169116141580610305575060015433600160a060020a03908116911614155b1561034157506000610380565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b506004879055600286905560058590556006805460b060020a860469ffffffffffffffffffff1990911617905560078390556008829055600981905560015b98975050505050505050565b600a80546000908152600b602052604090208054600160a060020a031916851790558054600190810190915591505b50919050565b5060005b600a5481101561038c576000818152600b6020526040902054600160a060020a03848116911614156103fa57600091506103bb565b6001016103c5565b5060005b919050565b600092505b5050919050565b600091505b600a5482101561040b576000828152600b6020526040902054600160a060020a038581169116141561047457600a54600019018214156104805760406000908120908390528054600160a060020a03191690556104ee565b6001919091019061041c565b50805b600a548110156104ca57600181016000818152600b60205260408082205493825290208054600160a060020a031916600160a060020a039390931692909217909155610483565b600a54600019016000908152600b602052604090208054600160a060020a03191690555b600a805460001901905560019250610410565b600091505b600c5482101561040b576000828152600d6020526040902054600160a060020a03858116911614156105c357600c54600019018214156105cf576040600081812084825254825160e460020a63083197ef0281529251600160a060020a0391909116926383197ef0926004828101939192829003018183876161da5a03f11561000257505050600c600050600101600050600083815260200190815260200160002060006101000a815490600160a060020a030219169055610694565b60019190910190610506565b50805b600c5481101561061957600181016000818152600d60205260408082205493825290208054600160a060020a031916600160a060020a0393909316929092179091556105d2565b600c54600019016000908152600d602052604080822054815160e460020a63083197ef0281529151600160a060020a0391909116926383197ef09260048181019391829003018183876161da5a03f115610002575050600c54600019016000908152600d602052604090208054600160a060020a0319169055505b600c805460001901905560019250610410565b5660606040526040516101a08061088a8339905160805160a05160c05160e051610100516101205161014051610160516101805199516101c0516101e05160008054600160a060020a0319908116909d178155600180548e16909c17909b55600280548d163317905560038054909c16909917909a5560049690965560059490945560086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7929092557fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f557f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041557f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d26455557f9321edea6e3be4df59a344b401fab4f888b556fda1f954244cff9204bad624b8949094557f91238f30f286c9a1c6e901c4eda3b214c381c846e3dbe48df95c21488e8e1fdb939093557f13acf3fc7bed94759963f076d5d3443d88732026bffc8253bdf4a6e65f21ecc591909155600781527f24cd397636bedc6cf9b490d0edd57c769c19b367fb7d5c2344ae1ddc7d21c144919091556102008190526006819055610220819052600b819055610260604052610240819052600d8190556106ac9081906101de90396000f3606060405236156100825760e060020a60003504630800e30081146100845780633264a34b146100e25780633bc5de30146100f557806359016c791461015157806383197ef01461029c5780638628aca9146102c4578063893d20e8146102d5578063b1e4e684146102e9578063c48ab0f114610313578063ee4d94021461033d575b005b61036f60043560065460009081908190819081908610156100d957505050829052600760205260409020805460018201546002830154600384015460049490940154600160a060020a03939093169391929091905b91939590929450565b610396600354600160a060020a03165b90565b600b54600d54600054600354600454600554600654600954600a54600160a060020a0396871660609081529590961660805260a09390935260c09190915260e05261010094909452610120928352610140939093526101605290f35b60086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7547fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f547f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041547f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d26455547f9321edea6e3be4df59a344b401fab4f888b556fda1f954244cff9204bad624b8547f91238f30f286c9a1c6e901c4eda3b214c381c846e3dbe48df95c21488e8e1fdb547f13acf3fc7bed94759963f076d5d3443d88732026bffc8253bdf4a6e65f21ecc55460076000527f24cd397636bedc6cf9b490d0edd57c769c19b367fb7d5c2344ae1ddc7d21c14454606097885260809690965260a09490945260c09290925260e052610100908152610120919091526101409190915290f35b6002546100829033600160a060020a039081169116146103bb57600054600160a060020a0316ff5b600435600a55602435600955610082565b610396600054600160a060020a03166100f2565b6103a960043560025460009081908190600160a060020a0390811633919091161461046657610457565b6103a960043560025460009081908190600160a060020a0390811633919091161461057557610457565b6103a9600435602435604435606435608435600254600090600160a060020a039081163391909116146103bd57610422565b600160a060020a0394909416606090815260809390935260a091825260c05260e092909252f35b600160a060020a03166060908152602090f35b60408051918252519081900360200190f35b565b61010060409081526060879052608086905260a085905260c084905260e0839052600680548352600760205291208054600160a060020a0319168717815560018181018790556002820186905560038201859055600491909101839055815481019091555b95945050505050565b600b80548252600c602052604082208054600160a060020a031916861790558054600190810190915592505b5050919050565b600191909101905b600d5482101561049657818152600e6020526040812054600160a060020a03908116908516141561045e57610457565b9050805b600b5482101561042b57818152600c6020526040812054600160a060020a0390811690851614156104ed57600b54600019018214156104f957604081208282528054600160a060020a031916905561055a565b6001919091019061049a565b50805b600b5481101561053e576001810183526040808420548285529084208054600160a060020a031916600160a060020a03929092169190911790556001016104fc565b600b54600019018352604083208054600160a060020a03191690555b600b805460001901905560019250610457565b600191909101905b600b548210156105a557818152600c6020526040812054600160a060020a03908116908516141561056d57610457565b9050805b600d548210156105fc57818152600e6020526040812054600160a060020a03908116908516141561062c57600d546000190182141561063857604081208282528054600160a060020a0319169055610699565b600d80548252600e602052604082208054600160a060020a03191686179055805460019081019091559250610457565b600191909101906105a9565b50805b600d5481101561067d576001810183526040808420548285529084208054600160a060020a031916600160a060020a039290921691909117905560010161063b565b600d54600019018352604083208054600160a060020a03191690555b600d80546000190190556001925061045756","info":{"source":"contract Post {\n\n    address private owner;\n    address private author;\n    address private index;\n    address private board;\n    bytes32 private title;\n    bytes32 private image;\n    Comments private comments;\n    mapping (uint => bytes32) private content;\n    uint private block;\n    uint private number;\n    aArray private up;\n    aArray private down;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    struct Comments {\n        uint size;\n        mapping (uint => Comment) array;\n    }\n\n    struct Comment {\n        address user;\n        uint block;\n        bytes32 t1;\n        bytes32 t2;\n        bytes32 t3;\n    }\n\n    function Post(address _owner, address _author, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) {\n        owner = address(_owner);\n        author = address(_author);\n        index = address(msg.sender);\n        board = address(_board);\n        title = _title;\n        image = _image;\n        content[0] = c1;\n        content[1] = c2;\n        content[2] = c3;\n        content[3] = c4;\n        content[4] = c5;\n        content[5] = c6;\n        content[6] = c7;\n        content[7] = c8;\n        comments = Comments(0);\n        up = aArray(0);\n        down = aArray(0);\n    }\n\n    function setIds(uint _number, uint _block){\n        number = _number;\n        block = _block;\n    }\n\n    function getData() constant returns (address, address, bytes32, bytes32, uint, uint, uint, uint, uint) {\n        return (owner, board, title, image, comments.size, up.size, down.size, block, number);\n    }\n\n    function getContent() constant returns (bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32) {\n        return (content[0], content[1], content[2], content[3], content[4], content[5], content[6], content[7]);\n    }\n\n    function getBoard() constant returns (address) {\n        return board;\n    }\n\n    function getComment(uint index) constant returns (address, uint, bytes32, bytes32, bytes32) {\n        if (index < comments.size)\n            return (comments.array[index].user, comments.array[index].block, comments.array[index].t1, comments.array[index].t2, comments.array[index].t3);\n        return( 0x0, 0, \"\", \"\", \"\");\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function addComment(address _user, uint _block, bytes32 _t1, bytes32 _t2, bytes32 _t3) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        comments.array[comments.size] = Comment({\n            user : _user,\n            block : _block,\n            t1 : _t1,\n            t2 : _t2,\n            t3 : _t3\n        });\n        comments.size ++;\n        return true;\n    }\n\n    function giveUp(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address)\n                return false;\n        for(i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address){\n                if (i == (up.size-1)){\n                    delete up.array[i];\n                } else {\n                    for(uint z = i; z < up.size; z ++)\n                        up.array[z] = up.array[z+1];\n                    delete up.array[up.size-1];\n                }\n                up.size --;\n                return true;\n            }\n        up.array[up.size] = user_address;\n        up.size ++;\n        return true;\n    }\n\n    function giveDown(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address)\n                return false;\n        for(i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address){\n                if (i == (down.size-1)){\n                    delete down.array[i];\n                } else {\n                    for(uint z = i; z < down.size; z ++)\n                        down.array[z] = down.array[z+1];\n                    delete down.array[down.size-1];\n                }\n                down.size --;\n                return true;\n            }\n        down.array[down.size] = user_address;\n        down.size ++;\n        return true;\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n}\n\ncontract Board {\n\n    address private owner;\n    address private index;\n    bytes32 private name;\n    aArray private posts;\n    aArray private users;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function Board(address _owner, bytes32 _name) {\n        name = _name;\n        index = msg.sender;\n        owner = _owner;\n        posts = aArray(0);\n        users = aArray(0);\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getName() constant returns (bytes32) {\n        return name;\n    }\n\n    function getInfo() constant returns (address, bytes32, uint, uint) {\n        return (owner, name, posts.size, users.size);\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function getUser(uint i) constant returns (address) {\n        if (index != address(msg.sender))\n            return 0x0;\n        if (i < users.size)\n            return (users.array[i]);\n        return 0x0;\n    }\n\n    function addPostOnBoard(address _user, address post_address) constant returns (bool)  {\n        if (index == address(msg.sender))\n            for( uint i = 0; i < users.size; i ++)\n                if (users.array[i] == address(_user)){\n                    posts.array[posts.size] = address(post_address);\n                    posts.size ++;\n                    return true;\n                }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i + 1; z < posts.size; z ++)\n                        posts.array[z-1] = posts.array[z];\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addUser(address new_user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        users.array[users.size] = new_user_address;\n        users.size ++;\n        return true;\n    }\n\n    function removeUser(address user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < users.size; i ++)\n            if (users.array[i] == user_address) {\n                if (i == (users.size-1))\n                    delete users.array[i];\n                else {\n                    for( uint z = i + 1; z < users.size; z ++)\n                        users.array[z-1] = users.array[z];\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n}\n\ncontract User {\n\n    address private owner;\n    address private index;\n    bytes32 private email;\n    bytes32 private username;\n    bytes32 private name;\n    bytes32 private imageurl;\n    bytes10 private birth;\n    bytes32 private location;\n    bytes32 private url1;\n    bytes32 private url2;\n    aArray private boards;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function User(address _owner, bytes32 _username) {\n        owner = address(_owner);\n        index = address(msg.sender);\n        username = _username;\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function edit(address _owner, bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) constant returns ( bool ) {\n        if ((owner != _owner) || (index != address(msg.sender)))\n            return false;\n        name = _name;\n        email = _email;\n        imageurl = _imageurl;\n        birth = _birth;\n        location = _location;\n        url1 = _url1;\n        url2 = _url2;\n        return true;\n    }\n\n    function addBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for(uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address)\n                return false;\n        boards.array[boards.size] = board_address;\n        boards.size ++;\n        return true;\n    }\n\n    function getBoard(uint i) constant returns (address) {\n        if (i < boards.size)\n            return (boards.array[i]);\n        return 0x0;\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address) {\n                if (i == (boards.size-1)){\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    delete boards.array[boards.size-1];\n                }\n                boards.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addPostOnUser(address post_address) constant returns (bool) {\n        if (index == address(msg.sender)){\n            posts.array[posts.size] = address(post_address);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    Post(posts.array[i]).destroy();\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i; z < posts.size; z ++)\n                        posts.array[z] = posts.array[z+1];\n                    Post(posts.array[posts.size-1]).destroy();\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function destroy () {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getUsername() constant returns (bytes32) {\n        return username;\n    }\n\n    function getData() constant returns (address, bytes32, bytes32, uint, uint) {\n        return (address(this), username, name, uint(boards.size), uint(posts.size));\n    }\n\n    function getProfile() constant returns (address, bytes32, bytes32, bytes32, bytes32, bytes10, bytes32, bytes32, bytes32) {\n        return (address(this), username, name, email, location, birth, imageurl, url1, url2);\n    }\n\n    function getOwner() constant returns (address) {\n        return owner;\n    }\n\n}\n\ncontract OpenContentIndex {\n\n    bytes32 constant version = \"0.1.1\";\n\n    aArray private boards;\n    aArray private users;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    event log (bytes32 message);\n    event logAddress (address message);\n    event logInt (uint message);\n\n    function OpenContentIndex() {\n        users = aArray(0);\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function getIndexInfo()constant returns (bytes32, uint, uint, uint) {\n        return (version, users.size, boards.size, posts.size);\n    }\n\n/*--------------------------------------------- TAGS ---------------------------------------------*/\n\n    function createBoard( bytes32 new_board_name ) constant returns (bool) {\n        for( uint i = 0; i < boards.size; i ++)\n            if (Board(boards.array[i]).getName() == bytes32(new_board_name))\n                return false;\n        for(uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin)){\n                Board newBoard = new Board(address(tx.origin), new_board_name);\n                newBoard.addUser(User(users.array[z]));\n                boards.array[boards.size] = address(newBoard);\n                boards.size ++;\n                User(users.array[z]).addBoard(address(newBoard));\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (address(tx.origin) != Board(board_address).getOwner())\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address){\n                if (i == (boards.size-1)){\n                    Board(boards.array[i]).destroy();\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    Board(boards.array[boards.size-1]).destroy();\n                    delete boards.array[boards.size-1];\n                }\n                for(i = 0; i < users.size; i ++)\n                    if (User(users.array[i]).getOwner() == address(tx.origin)){\n                        Board(board_address).removeUser(User(users.array[i]));\n                        User(users.array[i]).removeBoard(board_address);\n                        boards.size --;\n                        return true;\n                    }\n            }\n        return false;\n    }\n\n    function getBoardInfo(address board_address) constant returns (address, bytes32, uint, uint) {\n        for( uint i = 0; i < boards.size; i ++)\n            if ( address(boards.array[i]) == board_address )\n                return Board(boards.array[i]).getInfo();\n        return (0x0, \"\", 0, 0);\n    }\n\n/*--------------------------------------------- USERS ---------------------------------------------*/\n\n    function createUser(bytes32 _username) constant returns (bool){\n        for( uint i = 0; i < users.size; i ++)\n            if ((User(users.array[i]).getUsername() == _username) || (User(users.array[i]).getOwner() == address(tx.origin)))\n                return false;\n        users.array[users.size] = new User(address(tx.origin), _username);\n        users.size ++;\n        return true;\n    }\n\n    function editUser(bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)) {\n                User(users.array[i]).edit(address(tx.origin), _name, _email, _imageurl, _birth, _location, _url1, _url2);\n                return true;\n            }\n        return false;\n    }\n\n    function addBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).addUser(User(users.array[i]));\n                User(users.array[i]).addBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).removeUser(User(users.array[i]));\n                User(users.array[i]).removeBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeUser() constant returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                if (i == (users.size-1)){\n                    User(users.array[i]).destroy();\n                    delete users.array[i];\n                } else {\n                    for( uint z = i; z < users.size; z ++)\n                        users.array[z] = users.array[z+1];\n                    User(users.array[users.size-1]).destroy();\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function getUserByUsername(bytes32 _username) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getUsername() == _username)\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n    function getUserByAddress(address _owner) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if ( User(users.array[i]).getOwner() == _owner )\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n/*--------------------------------------------- POSTS ---------------------------------------------*/\n\n    function getHomePost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return posts.array[i];\n        return (0x0);\n    }\n\n    function addComment(address post_address, bytes32 t1, bytes32 t2, bytes32 t3) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).addComment(address(tx.origin), block.number, t1, t2, t3);\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveUp(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveUp(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveDown(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveDown(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function createPost(address _user, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) returns (bool) {\n        if (User(address(_user)).getOwner() == address(tx.origin)){\n            Post newPost = new Post(address(tx.origin), address(_user), _board, _title, _image, c1, c2, c3, c4, c5, c6, c7, c8);\n            Board(address(_board)).addPostOnBoard(address(_user), address(newPost));\n            Post(address(newPost)).setIds(posts.size, block.number);\n            User(address(_user)).addPostOnUser(address(newPost));\n            posts.array[posts.size] = address(newPost);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) returns (bool) {\n        for( uint i = 0; i < posts.size; i ++)\n            if ((posts.array[i] == post_address) && (Post(posts.array[i]).getOwner() == address(tx.origin)) )\n                for( uint z = 0; z < users.size; z ++)\n                    if (User(users.array[z]).getOwner() == address(tx.origin)){\n                        Board(Post(posts.array[i]).getBoard()).removePost(post_address);\n                        User(users.array[z]).removePost(post_address);\n                        if (i == (posts.size-1)){\n                            delete posts.array[i];\n                        } else {\n                            for(z = i; z < posts.size; z ++)\n                                posts.array[z] = posts.array[z+1];\n                            delete posts.array[posts.size-1];\n                        }\n                        posts.size --;\n                        return true;\n                    }\n        return false;\n    }\n\n}\n","language":"Solidity","languageVersion":"0.3.0","compilerVersion":"0.3.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /tmp/solc657640558","abiDefinition":[{"constant":true,"inputs":[{"name":"board_address","type":"address"}],"name":"getBoardInfo","outputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"getHomePost","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"_user","type":"address"},{"name":"_board","type":"address"},{"name":"_title","type":"bytes32"},{"name":"_image","type":"bytes32"},{"name":"c1","type":"bytes32"},{"name":"c2","type":"bytes32"},{"name":"c3","type":"bytes32"},{"name":"c4","type":"bytes32"},{"name":"c5","type":"bytes32"},{"name":"c6","type":"bytes32"},{"name":"c7","type":"bytes32"},{"name":"c8","type":"bytes32"}],"name":"createPost","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getUserByAddress","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"post_address","type":"address"},{"name":"t1","type":"bytes32"},{"name":"t2","type":"bytes32"},{"name":"t3","type":"bytes32"}],"name":"addComment","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"board_address","type":"address"}],"name":"removeBoard","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"_username","type":"bytes32"}],"name":"createUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"post_address","type":"address"}],"name":"giveUp","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"getIndexInfo","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"board_address","type":"address"}],"name":"addBoardOnUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"post_address","type":"address"}],"name":"giveDown","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"post_address","type":"address"}],"name":"removePost","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_email","type":"bytes32"},{"name":"_imageurl","type":"bytes32"},{"name":"_birth","type":"bytes10"},{"name":"_location","type":"bytes32"},{"name":"_url1","type":"bytes32"},{"name":"_url2","type":"bytes32"}],"name":"editUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"new_board_name","type":"bytes32"}],"name":"createBoard","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"removeUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"_username","type":"bytes32"}],"name":"getUserByUsername","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"board_address","type":"address"}],"name":"removeBoardOnUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"bytes32"}],"name":"log","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"address"}],"name":"logAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"uint256"}],"name":"logInt","type":"event"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"Post":{"code":"0x60606040526040516101a08061088a8339905160805160a05160c05160e051610100516101205161014051610160516101805199516101c0516101e05160008054600160a060020a0319908116909d178155600180548e16909c17909b55600280548d163317905560038054909c16909917909a5560049690965560059490945560086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7929092557fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f557f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041557f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d26455557f9321edea6e3be4df59a344b401fab4f888b556fda1f954244cff9204bad624b8949094557f91238f30f286c9a1c6e901c4eda3b214c381c846e3dbe48df95c21488e8e1fdb939093557f13acf3fc7bed94759963f076d5d3443d88732026bffc8253bdf4a6e65f21ecc591909155600781527f24cd397636bedc6cf9b490d0edd57c769c19b367fb7d5c2344ae1ddc7d21c144919091556102008190526006819055610220819052600b819055610260604052610240819052600d8190556106ac9081906101de90396000f3606060405236156100825760e060020a60003504630800e30081146100845780633264a34b146100e25780633bc5de30146100f557806359016c791461015157806383197ef01461029c5780638628aca9146102c4578063893d20e8146102d5578063b1e4e684146102e9578063c48ab0f114610313578063ee4d94021461033d575b005b61036f60043560065460009081908190819081908610156100d957505050829052600760205260409020805460018201546002830154600384015460049490940154600160a060020a03939093169391929091905b91939590929450565b610396600354600160a060020a03165b90565b600b54600d54600054600354600454600554600654600954600a54600160a060020a0396871660609081529590961660805260a09390935260c09190915260e05261010094909452610120928352610140939093526101605290f35b60086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7547fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f547f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041547f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d26455547f9321edea6e3be4df59a344b401fab4f888b556fda1f954244cff9204bad624b8547f91238f30f286c9a1c6e901c4eda3b214c381c846e3dbe48df95c21488e8e1fdb547f13acf3fc7bed94759963f076d5d3443d88732026bffc8253bdf4a6e65f21ecc55460076000527f24cd397636bedc6cf9b490d0edd57c769c19b367fb7d5c2344ae1ddc7d21c14454606097885260809690965260a09490945260c09290925260e052610100908152610120919091526101409190915290f35b6002546100829033600160a060020a039081169116146103bb57600054600160a060020a0316ff5b600435600a55602435600955610082565b610396600054600160a060020a03166100f2565b6103a960043560025460009081908190600160a060020a0390811633919091161461046657610457565b6103a960043560025460009081908190600160a060020a0390811633919091161461057557610457565b6103a9600435602435604435606435608435600254600090600160a060020a039081163391909116146103bd57610422565b600160a060020a0394909416606090815260809390935260a091825260c05260e092909252f35b600160a060020a03166060908152602090f35b60408051918252519081900360200190f35b565b61010060409081526060879052608086905260a085905260c084905260e0839052600680548352600760205291208054600160a060020a0319168717815560018181018790556002820186905560038201859055600491909101839055815481019091555b95945050505050565b600b80548252600c602052604082208054600160a060020a031916861790558054600190810190915592505b5050919050565b600191909101905b600d5482101561049657818152600e6020526040812054600160a060020a03908116908516141561045e57610457565b9050805b600b5482101561042b57818152600c6020526040812054600160a060020a0390811690851614156104ed57600b54600019018214156104f957604081208282528054600160a060020a031916905561055a565b6001919091019061049a565b50805b600b5481101561053e576001810183526040808420548285529084208054600160a060020a031916600160a060020a03929092169190911790556001016104fc565b600b54600019018352604083208054600160a060020a03191690555b600b805460001901905560019250610457565b600191909101905b600b548210156105a557818152600c6020526040812054600160a060020a03908116908516141561056d57610457565b9050805b600d548210156105fc57818152600e6020526040812054600160a060020a03908116908516141561062c57600d546000190182141561063857604081208282528054600160a060020a0319169055610699565b600d80548252600e602052604082208054600160a060020a03191686179055805460019081019091559250610457565b600191909101906105a9565b50805b600d5481101561067d576001810183526040808420548285529084208054600160a060020a031916600160a060020a039290921691909117905560010161063b565b600d54600019018352604083208054600160a060020a03191690555b600d80546000190190556001925061045756","info":{"source":"contract Post {\n\n    address private owner;\n    address private author;\n    address private index;\n    address private board;\n    bytes32 private title;\n    bytes32 private image;\n    Comments private comments;\n    mapping (uint => bytes32) private content;\n    uint private block;\n    uint private number;\n    aArray private up;\n    aArray private down;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    struct Comments {\n        uint size;\n        mapping (uint => Comment) array;\n    }\n\n    struct Comment {\n        address user;\n        uint block;\n        bytes32 t1;\n        bytes32 t2;\n        bytes32 t3;\n    }\n\n    function Post(address _owner, address _author, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) {\n        owner = address(_owner);\n        author = address(_author);\n        index = address(msg.sender);\n        board = address(_board);\n        title = _title;\n        image = _image;\n        content[0] = c1;\n        content[1] = c2;\n        content[2] = c3;\n        content[3] = c4;\n        content[4] = c5;\n        content[5] = c6;\n        content[6] = c7;\n        content[7] = c8;\n        comments = Comments(0);\n        up = aArray(0);\n        down = aArray(0);\n    }\n\n    function setIds(uint _number, uint _block){\n        number = _number;\n        block = _block;\n    }\n\n    function getData() constant returns (address, address, bytes32, bytes32, uint, uint, uint, uint, uint) {\n        return (owner, board, title, image, comments.size, up.size, down.size, block, number);\n    }\n\n    function getContent() constant returns (bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32) {\n        return (content[0], content[1], content[2], content[3], content[4], content[5], content[6], content[7]);\n    }\n\n    function getBoard() constant returns (address) {\n        return board;\n    }\n\n    function getComment(uint index) constant returns (address, uint, bytes32, bytes32, bytes32) {\n        if (index < comments.size)\n            return (comments.array[index].user, comments.array[index].block, comments.array[index].t1, comments.array[index].t2, comments.array[index].t3);\n        return( 0x0, 0, \"\", \"\", \"\");\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function addComment(address _user, uint _block, bytes32 _t1, bytes32 _t2, bytes32 _t3) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        comments.array[comments.size] = Comment({\n            user : _user,\n            block : _block,\n            t1 : _t1,\n            t2 : _t2,\n            t3 : _t3\n        });\n        comments.size ++;\n        return true;\n    }\n\n    function giveUp(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address)\n                return false;\n        for(i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address){\n                if (i == (up.size-1)){\n                    delete up.array[i];\n                } else {\n                    for(uint z = i; z < up.size; z ++)\n                        up.array[z] = up.array[z+1];\n                    delete up.array[up.size-1];\n                }\n                up.size --;\n                return true;\n            }\n        up.array[up.size] = user_address;\n        up.size ++;\n        return true;\n    }\n\n    function giveDown(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address)\n                return false;\n        for(i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address){\n                if (i == (down.size-1)){\n                    delete down.array[i];\n                } else {\n                    for(uint z = i; z < down.size; z ++)\n                        down.array[z] = down.array[z+1];\n                    delete down.array[down.size-1];\n                }\n                down.size --;\n                return true;\n            }\n        down.array[down.size] = user_address;\n        down.size ++;\n        return true;\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n}\n\ncontract Board {\n\n    address private owner;\n    address private index;\n    bytes32 private name;\n    aArray private posts;\n    aArray private users;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function Board(address _owner, bytes32 _name) {\n        name = _name;\n        index = msg.sender;\n        owner = _owner;\n        posts = aArray(0);\n        users = aArray(0);\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getName() constant returns (bytes32) {\n        return name;\n    }\n\n    function getInfo() constant returns (address, bytes32, uint, uint) {\n        return (owner, name, posts.size, users.size);\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function getUser(uint i) constant returns (address) {\n        if (index != address(msg.sender))\n            return 0x0;\n        if (i < users.size)\n            return (users.array[i]);\n        return 0x0;\n    }\n\n    function addPostOnBoard(address _user, address post_address) constant returns (bool)  {\n        if (index == address(msg.sender))\n            for( uint i = 0; i < users.size; i ++)\n                if (users.array[i] == address(_user)){\n                    posts.array[posts.size] = address(post_address);\n                    posts.size ++;\n                    return true;\n                }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i + 1; z < posts.size; z ++)\n                        posts.array[z-1] = posts.array[z];\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addUser(address new_user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        users.array[users.size] = new_user_address;\n        users.size ++;\n        return true;\n    }\n\n    function removeUser(address user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < users.size; i ++)\n            if (users.array[i] == user_address) {\n                if (i == (users.size-1))\n                    delete users.array[i];\n                else {\n                    for( uint z = i + 1; z < users.size; z ++)\n                        users.array[z-1] = users.array[z];\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n}\n\ncontract User {\n\n    address private owner;\n    address private index;\n    bytes32 private email;\n    bytes32 private username;\n    bytes32 private name;\n    bytes32 private imageurl;\n    bytes10 private birth;\n    bytes32 private location;\n    bytes32 private url1;\n    bytes32 private url2;\n    aArray private boards;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function User(address _owner, bytes32 _username) {\n        owner = address(_owner);\n        index = address(msg.sender);\n        username = _username;\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function edit(address _owner, bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) constant returns ( bool ) {\n        if ((owner != _owner) || (index != address(msg.sender)))\n            return false;\n        name = _name;\n        email = _email;\n        imageurl = _imageurl;\n        birth = _birth;\n        location = _location;\n        url1 = _url1;\n        url2 = _url2;\n        return true;\n    }\n\n    function addBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for(uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address)\n                return false;\n        boards.array[boards.size] = board_address;\n        boards.size ++;\n        return true;\n    }\n\n    function getBoard(uint i) constant returns (address) {\n        if (i < boards.size)\n            return (boards.array[i]);\n        return 0x0;\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address) {\n                if (i == (boards.size-1)){\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    delete boards.array[boards.size-1];\n                }\n                boards.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addPostOnUser(address post_address) constant returns (bool) {\n        if (index == address(msg.sender)){\n            posts.array[posts.size] = address(post_address);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    Post(posts.array[i]).destroy();\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i; z < posts.size; z ++)\n                        posts.array[z] = posts.array[z+1];\n                    Post(posts.array[posts.size-1]).destroy();\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function destroy () {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getUsername() constant returns (bytes32) {\n        return username;\n    }\n\n    function getData() constant returns (address, bytes32, bytes32, uint, uint) {\n        return (address(this), username, name, uint(boards.size), uint(posts.size));\n    }\n\n    function getProfile() constant returns (address, bytes32, bytes32, bytes32, bytes32, bytes10, bytes32, bytes32, bytes32) {\n        return (address(this), username, name, email, location, birth, imageurl, url1, url2);\n    }\n\n    function getOwner() constant returns (address) {\n        return owner;\n    }\n\n}\n\ncontract OpenContentIndex {\n\n    bytes32 constant version = \"0.1.1\";\n\n    aArray private boards;\n    aArray private users;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    event log (bytes32 message);\n    event logAddress (address message);\n    event logInt (uint message);\n\n    function OpenContentIndex() {\n        users = aArray(0);\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function getIndexInfo()constant returns (bytes32, uint, uint, uint) {\n        return (version, users.size, boards.size, posts.size);\n    }\n\n/*--------------------------------------------- TAGS ---------------------------------------------*/\n\n    function createBoard( bytes32 new_board_name ) constant returns (bool) {\n        for( uint i = 0; i < boards.size; i ++)\n            if (Board(boards.array[i]).getName() == bytes32(new_board_name))\n                return false;\n        for(uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin)){\n                Board newBoard = new Board(address(tx.origin), new_board_name);\n                newBoard.addUser(User(users.array[z]));\n                boards.array[boards.size] = address(newBoard);\n                boards.size ++;\n                User(users.array[z]).addBoard(address(newBoard));\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (address(tx.origin) != Board(board_address).getOwner())\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address){\n                if (i == (boards.size-1)){\n                    Board(boards.array[i]).destroy();\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    Board(boards.array[boards.size-1]).destroy();\n                    delete boards.array[boards.size-1];\n                }\n                for(i = 0; i < users.size; i ++)\n                    if (User(users.array[i]).getOwner() == address(tx.origin)){\n                        Board(board_address).removeUser(User(users.array[i]));\n                        User(users.array[i]).removeBoard(board_address);\n                        boards.size --;\n                        return true;\n                    }\n            }\n        return false;\n    }\n\n    function getBoardInfo(address board_address) constant returns (address, bytes32, uint, uint) {\n        for( uint i = 0; i < boards.size; i ++)\n            if ( address(boards.array[i]) == board_address )\n                return Board(boards.array[i]).getInfo();\n        return (0x0, \"\", 0, 0);\n    }\n\n/*--------------------------------------------- USERS ---------------------------------------------*/\n\n    function createUser(bytes32 _username) constant returns (bool){\n        for( uint i = 0; i < users.size; i ++)\n            if ((User(users.array[i]).getUsername() == _username) || (User(users.array[i]).getOwner() == address(tx.origin)))\n                return false;\n        users.array[users.size] = new User(address(tx.origin), _username);\n        users.size ++;\n        return true;\n    }\n\n    function editUser(bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)) {\n                User(users.array[i]).edit(address(tx.origin), _name, _email, _imageurl, _birth, _location, _url1, _url2);\n                return true;\n            }\n        return false;\n    }\n\n    function addBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).addUser(User(users.array[i]));\n                User(users.array[i]).addBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).removeUser(User(users.array[i]));\n                User(users.array[i]).removeBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeUser() constant returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                if (i == (users.size-1)){\n                    User(users.array[i]).destroy();\n                    delete users.array[i];\n                } else {\n                    for( uint z = i; z < users.size; z ++)\n                        users.array[z] = users.array[z+1];\n                    User(users.array[users.size-1]).destroy();\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function getUserByUsername(bytes32 _username) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getUsername() == _username)\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n    function getUserByAddress(address _owner) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if ( User(users.array[i]).getOwner() == _owner )\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n/*--------------------------------------------- POSTS ---------------------------------------------*/\n\n    function getHomePost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return posts.array[i];\n        return (0x0);\n    }\n\n    function addComment(address post_address, bytes32 t1, bytes32 t2, bytes32 t3) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).addComment(address(tx.origin), block.number, t1, t2, t3);\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveUp(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveUp(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveDown(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveDown(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function createPost(address _user, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) returns (bool) {\n        if (User(address(_user)).getOwner() == address(tx.origin)){\n            Post newPost = new Post(address(tx.origin), address(_user), _board, _title, _image, c1, c2, c3, c4, c5, c6, c7, c8);\n            Board(address(_board)).addPostOnBoard(address(_user), address(newPost));\n            Post(address(newPost)).setIds(posts.size, block.number);\n            User(address(_user)).addPostOnUser(address(newPost));\n            posts.array[posts.size] = address(newPost);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) returns (bool) {\n        for( uint i = 0; i < posts.size; i ++)\n            if ((posts.array[i] == post_address) && (Post(posts.array[i]).getOwner() == address(tx.origin)) )\n                for( uint z = 0; z < users.size; z ++)\n                    if (User(users.array[z]).getOwner() == address(tx.origin)){\n                        Board(Post(posts.array[i]).getBoard()).removePost(post_address);\n                        User(users.array[z]).removePost(post_address);\n                        if (i == (posts.size-1)){\n                            delete posts.array[i];\n                        } else {\n                            for(z = i; z < posts.size; z ++)\n                                posts.array[z] = posts.array[z+1];\n                            delete posts.array[posts.size-1];\n                        }\n                        posts.size --;\n                        return true;\n                    }\n        return false;\n    }\n\n}\n","language":"Solidity","languageVersion":"0.3.0","compilerVersion":"0.3.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /tmp/solc657640558","abiDefinition":[{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getComment","outputs":[{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[],"name":"getBoard","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"getData","outputs":[{"name":"","type":"address"},{"name":"","type":"address"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getContent","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_number","type":"uint256"},{"name":"_block","type":"uint256"}],"name":"setIds","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"user_address","type":"address"}],"name":"giveUp","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"user_address","type":"address"}],"name":"giveDown","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"_user","type":"address"},{"name":"_block","type":"uint256"},{"name":"_t1","type":"bytes32"},{"name":"_t2","type":"bytes32"},{"name":"_t3","type":"bytes32"}],"name":"addComment","outputs":[{"name":"","type":"bool"}],"type":"function"},{"inputs":[{"name":"_owner","type":"address"},{"name":"_author","type":"address"},{"name":"_board","type":"address"},{"name":"_title","type":"bytes32"},{"name":"_image","type":"bytes32"},{"name":"c1","type":"bytes32"},{"name":"c2","type":"bytes32"},{"name":"c3","type":"bytes32"},{"name":"c4","type":"bytes32"},{"name":"c5","type":"bytes32"},{"name":"c6","type":"bytes32"},{"name":"c7","type":"bytes32"},{"name":"c8","type":"bytes32"}],"type":"constructor"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"User":{"code":"0x6060604081815280610708833960a090525160805160008054600160a060020a0319908116841782556001805490911633179055600382905560a0819052600a81905560e060405260c0819052600c5550506106a98061005f6000396000f3606060405236156100985760e060020a600035046310a1c573811461009a5780633bc5de30146100c157806340731c241461010857806345e09e5414610136578063585e554e14610164578063681f3e6d146101b457806383197ef0146101be578063893d20e8146101e6578063957f13f4146101fa578063d091ec3114610223578063d6afc9b11461024c578063e8a481bd146102bd575b005b6103126004356001546000908190600160a060020a0390811633909116146103c1576103bb565b600a54600c546003546004546040805130600160a060020a031681526020810193909352828101919091526060820193909352608081019190915290519081900360a00190f35b610324600435600c5460009082101561040257818152600d6020526040902054600160a060020a0316610406565b610324600435600a5460009082101561040257818152600b6020526040902054600160a060020a0316610406565b610312600435600154600090600160a060020a0390811633909116141561040257600c80548252600d60205260409091208054600160a060020a0319168317905580546001908101909155610406565b6103126003545b90565b610098600154600160a060020a0390811633909116146106a757600054600160a060020a0316ff5b610324600054600160a060020a03166101bb565b61031260043560015460009081908190600160a060020a03908116339091161461041757610410565b61031260043560015460009081908190600160a060020a03908116339091161461050157610410565b6003546004546002546007546006546005546008546009546040805130600160a060020a031681526020810199909952888101979097526060880195909552608087019390935260b060020a9190910260a086015260c085015260e084015261010083015251908190036101200190f35b61031260043560243560443560643560843560a43560c43560e43560008054600160a060020a038a81169116141580610305575060015433600160a060020a03908116911614155b1561034157506000610380565b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b506004879055600286905560058590556006805460b060020a860469ffffffffffffffffffff1990911617905560078390556008829055600981905560015b98975050505050505050565b600a80546000908152600b602052604090208054600160a060020a031916851790558054600190810190915591505b50919050565b5060005b600a5481101561038c576000818152600b6020526040902054600160a060020a03848116911614156103fa57600091506103bb565b6001016103c5565b5060005b919050565b600092505b5050919050565b600091505b600a5482101561040b576000828152600b6020526040902054600160a060020a038581169116141561047457600a54600019018214156104805760406000908120908390528054600160a060020a03191690556104ee565b6001919091019061041c565b50805b600a548110156104ca57600181016000818152600b60205260408082205493825290208054600160a060020a031916600160a060020a039390931692909217909155610483565b600a54600019016000908152600b602052604090208054600160a060020a03191690555b600a805460001901905560019250610410565b600091505b600c5482101561040b576000828152600d6020526040902054600160a060020a03858116911614156105c357600c54600019018214156105cf576040600081812084825254825160e460020a63083197ef0281529251600160a060020a0391909116926383197ef0926004828101939192829003018183876161da5a03f11561000257505050600c600050600101600050600083815260200190815260200160002060006101000a815490600160a060020a030219169055610694565b60019190910190610506565b50805b600c5481101561061957600181016000818152600d60205260408082205493825290208054600160a060020a031916600160a060020a0393909316929092179091556105d2565b600c54600019016000908152600d602052604080822054815160e460020a63083197ef0281529151600160a060020a0391909116926383197ef09260048181019391829003018183876161da5a03f115610002575050600c54600019016000908152600d602052604090208054600160a060020a0319169055505b600c805460001901905560019250610410565b56","info":{"source":"contract Post {\n\n    address private owner;\n    address private author;\n    address private index;\n    address private board;\n    bytes32 private title;\n    bytes32 private image;\n    Comments private comments;\n    mapping (uint => bytes32) private content;\n    uint private block;\n    uint private number;\n    aArray private up;\n    aArray private down;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    struct Comments {\n        uint size;\n        mapping (uint => Comment) array;\n    }\n\n    struct Comment {\n        address user;\n        uint block;\n        bytes32 t1;\n        bytes32 t2;\n        bytes32 t3;\n    }\n\n    function Post(address _owner, address _author, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) {\n        owner = address(_owner);\n        author = address(_author);\n        index = address(msg.sender);\n        board = address(_board);\n        title = _title;\n        image = _image;\n        content[0] = c1;\n        content[1] = c2;\n        content[2] = c3;\n        content[3] = c4;\n        content[4] = c5;\n        content[5] = c6;\n        content[6] = c7;\n        content[7] = c8;\n        comments = Comments(0);\n        up = aArray(0);\n        down = aArray(0);\n    }\n\n    function setIds(uint _number, uint _block){\n        number = _number;\n        block = _block;\n    }\n\n    function getData() constant returns (address, address, bytes32, bytes32, uint, uint, uint, uint, uint) {\n        return (owner, board, title, image, comments.size, up.size, down.size, block, number);\n    }\n\n    function getContent() constant returns (bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32, bytes32) {\n        return (content[0], content[1], content[2], content[3], content[4], content[5], content[6], content[7]);\n    }\n\n    function getBoard() constant returns (address) {\n        return board;\n    }\n\n    function getComment(uint index) constant returns (address, uint, bytes32, bytes32, bytes32) {\n        if (index < comments.size)\n            return (comments.array[index].user, comments.array[index].block, comments.array[index].t1, comments.array[index].t2, comments.array[index].t3);\n        return( 0x0, 0, \"\", \"\", \"\");\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function addComment(address _user, uint _block, bytes32 _t1, bytes32 _t2, bytes32 _t3) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        comments.array[comments.size] = Comment({\n            user : _user,\n            block : _block,\n            t1 : _t1,\n            t2 : _t2,\n            t3 : _t3\n        });\n        comments.size ++;\n        return true;\n    }\n\n    function giveUp(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address)\n                return false;\n        for(i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address){\n                if (i == (up.size-1)){\n                    delete up.array[i];\n                } else {\n                    for(uint z = i; z < up.size; z ++)\n                        up.array[z] = up.array[z+1];\n                    delete up.array[up.size-1];\n                }\n                up.size --;\n                return true;\n            }\n        up.array[up.size] = user_address;\n        up.size ++;\n        return true;\n    }\n\n    function giveDown(address user_address) constant returns (bool){\n        if (index != address(msg.sender))\n                return false;\n        for(uint i = 0; i < up.size; i ++)\n            if (up.array[i] == user_address)\n                return false;\n        for(i = 0; i < down.size; i ++)\n            if (down.array[i] == user_address){\n                if (i == (down.size-1)){\n                    delete down.array[i];\n                } else {\n                    for(uint z = i; z < down.size; z ++)\n                        down.array[z] = down.array[z+1];\n                    delete down.array[down.size-1];\n                }\n                down.size --;\n                return true;\n            }\n        down.array[down.size] = user_address;\n        down.size ++;\n        return true;\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n}\n\ncontract Board {\n\n    address private owner;\n    address private index;\n    bytes32 private name;\n    aArray private posts;\n    aArray private users;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function Board(address _owner, bytes32 _name) {\n        name = _name;\n        index = msg.sender;\n        owner = _owner;\n        posts = aArray(0);\n        users = aArray(0);\n    }\n\n    function destroy() {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getName() constant returns (bytes32) {\n        return name;\n    }\n\n    function getInfo() constant returns (address, bytes32, uint, uint) {\n        return (owner, name, posts.size, users.size);\n    }\n\n    function getOwner() constant returns (address) {\n        return address(owner);\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function getUser(uint i) constant returns (address) {\n        if (index != address(msg.sender))\n            return 0x0;\n        if (i < users.size)\n            return (users.array[i]);\n        return 0x0;\n    }\n\n    function addPostOnBoard(address _user, address post_address) constant returns (bool)  {\n        if (index == address(msg.sender))\n            for( uint i = 0; i < users.size; i ++)\n                if (users.array[i] == address(_user)){\n                    posts.array[posts.size] = address(post_address);\n                    posts.size ++;\n                    return true;\n                }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i + 1; z < posts.size; z ++)\n                        posts.array[z-1] = posts.array[z];\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addUser(address new_user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        users.array[users.size] = new_user_address;\n        users.size ++;\n        return true;\n    }\n\n    function removeUser(address user_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < users.size; i ++)\n            if (users.array[i] == user_address) {\n                if (i == (users.size-1))\n                    delete users.array[i];\n                else {\n                    for( uint z = i + 1; z < users.size; z ++)\n                        users.array[z-1] = users.array[z];\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n}\n\ncontract User {\n\n    address private owner;\n    address private index;\n    bytes32 private email;\n    bytes32 private username;\n    bytes32 private name;\n    bytes32 private imageurl;\n    bytes10 private birth;\n    bytes32 private location;\n    bytes32 private url1;\n    bytes32 private url2;\n    aArray private boards;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    function User(address _owner, bytes32 _username) {\n        owner = address(_owner);\n        index = address(msg.sender);\n        username = _username;\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function edit(address _owner, bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) constant returns ( bool ) {\n        if ((owner != _owner) || (index != address(msg.sender)))\n            return false;\n        name = _name;\n        email = _email;\n        imageurl = _imageurl;\n        birth = _birth;\n        location = _location;\n        url1 = _url1;\n        url2 = _url2;\n        return true;\n    }\n\n    function addBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for(uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address)\n                return false;\n        boards.array[boards.size] = board_address;\n        boards.size ++;\n        return true;\n    }\n\n    function getBoard(uint i) constant returns (address) {\n        if (i < boards.size)\n            return (boards.array[i]);\n        return 0x0;\n    }\n\n    function getPost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return (posts.array[i]);\n        return 0x0;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address) {\n                if (i == (boards.size-1)){\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    delete boards.array[boards.size-1];\n                }\n                boards.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function addPostOnUser(address post_address) constant returns (bool) {\n        if (index == address(msg.sender)){\n            posts.array[posts.size] = address(post_address);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) constant returns (bool) {\n        if (index != address(msg.sender))\n            return false;\n        for( uint i = 0; i < posts.size; i ++)\n            if (posts.array[i] == post_address) {\n                if (i == (posts.size-1)){\n                    Post(posts.array[i]).destroy();\n                    delete posts.array[i];\n                } else {\n                    for( uint z = i; z < posts.size; z ++)\n                        posts.array[z] = posts.array[z+1];\n                    Post(posts.array[posts.size-1]).destroy();\n                    delete posts.array[posts.size-1];\n                }\n                posts.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function destroy () {\n        if (index != address(msg.sender))\n            suicide(owner);\n    }\n\n    function getUsername() constant returns (bytes32) {\n        return username;\n    }\n\n    function getData() constant returns (address, bytes32, bytes32, uint, uint) {\n        return (address(this), username, name, uint(boards.size), uint(posts.size));\n    }\n\n    function getProfile() constant returns (address, bytes32, bytes32, bytes32, bytes32, bytes10, bytes32, bytes32, bytes32) {\n        return (address(this), username, name, email, location, birth, imageurl, url1, url2);\n    }\n\n    function getOwner() constant returns (address) {\n        return owner;\n    }\n\n}\n\ncontract OpenContentIndex {\n\n    bytes32 constant version = \"0.1.1\";\n\n    aArray private boards;\n    aArray private users;\n    aArray private posts;\n\n    struct aArray {\n        uint size;\n        mapping (uint => address) array;\n    }\n\n    event log (bytes32 message);\n    event logAddress (address message);\n    event logInt (uint message);\n\n    function OpenContentIndex() {\n        users = aArray(0);\n        boards = aArray(0);\n        posts = aArray(0);\n    }\n\n    function getIndexInfo()constant returns (bytes32, uint, uint, uint) {\n        return (version, users.size, boards.size, posts.size);\n    }\n\n/*--------------------------------------------- TAGS ---------------------------------------------*/\n\n    function createBoard( bytes32 new_board_name ) constant returns (bool) {\n        for( uint i = 0; i < boards.size; i ++)\n            if (Board(boards.array[i]).getName() == bytes32(new_board_name))\n                return false;\n        for(uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin)){\n                Board newBoard = new Board(address(tx.origin), new_board_name);\n                newBoard.addUser(User(users.array[z]));\n                boards.array[boards.size] = address(newBoard);\n                boards.size ++;\n                User(users.array[z]).addBoard(address(newBoard));\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoard(address board_address) constant returns ( bool ) {\n        if (address(tx.origin) != Board(board_address).getOwner())\n            return false;\n        for( uint i = 0; i < boards.size; i ++)\n            if (boards.array[i] == board_address){\n                if (i == (boards.size-1)){\n                    Board(boards.array[i]).destroy();\n                    delete boards.array[i];\n                } else {\n                    for( uint z = i; z < boards.size; z ++)\n                        boards.array[z] = boards.array[z+1];\n                    Board(boards.array[boards.size-1]).destroy();\n                    delete boards.array[boards.size-1];\n                }\n                for(i = 0; i < users.size; i ++)\n                    if (User(users.array[i]).getOwner() == address(tx.origin)){\n                        Board(board_address).removeUser(User(users.array[i]));\n                        User(users.array[i]).removeBoard(board_address);\n                        boards.size --;\n                        return true;\n                    }\n            }\n        return false;\n    }\n\n    function getBoardInfo(address board_address) constant returns (address, bytes32, uint, uint) {\n        for( uint i = 0; i < boards.size; i ++)\n            if ( address(boards.array[i]) == board_address )\n                return Board(boards.array[i]).getInfo();\n        return (0x0, \"\", 0, 0);\n    }\n\n/*--------------------------------------------- USERS ---------------------------------------------*/\n\n    function createUser(bytes32 _username) constant returns (bool){\n        for( uint i = 0; i < users.size; i ++)\n            if ((User(users.array[i]).getUsername() == _username) || (User(users.array[i]).getOwner() == address(tx.origin)))\n                return false;\n        users.array[users.size] = new User(address(tx.origin), _username);\n        users.size ++;\n        return true;\n    }\n\n    function editUser(bytes32 _name, bytes32 _email, bytes32 _imageurl, bytes10 _birth, bytes32 _location, bytes32 _url1, bytes32 _url2) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)) {\n                User(users.array[i]).edit(address(tx.origin), _name, _email, _imageurl, _birth, _location, _url1, _url2);\n                return true;\n            }\n        return false;\n    }\n\n    function addBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).addUser(User(users.array[i]));\n                User(users.array[i]).addBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeBoardOnUser(address board_address) returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                Board(board_address).removeUser(User(users.array[i]));\n                User(users.array[i]).removeBoard(board_address);\n                return true;\n            }\n        return false;\n    }\n\n    function removeUser() constant returns (bool) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getOwner() == address(tx.origin)){\n                if (i == (users.size-1)){\n                    User(users.array[i]).destroy();\n                    delete users.array[i];\n                } else {\n                    for( uint z = i; z < users.size; z ++)\n                        users.array[z] = users.array[z+1];\n                    User(users.array[users.size-1]).destroy();\n                    delete users.array[users.size-1];\n                }\n                users.size --;\n                return true;\n            }\n        return false;\n    }\n\n    function getUserByUsername(bytes32 _username) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if (User(users.array[i]).getUsername() == _username)\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n    function getUserByAddress(address _owner) constant returns (address) {\n        for( uint i = 0; i < users.size; i ++)\n            if ( User(users.array[i]).getOwner() == _owner )\n                return User(users.array[i]);\n        return (0x0);\n    }\n\n/*--------------------------------------------- POSTS ---------------------------------------------*/\n\n    function getHomePost(uint i) constant returns (address) {\n        if (i < posts.size)\n            return posts.array[i];\n        return (0x0);\n    }\n\n    function addComment(address post_address, bytes32 t1, bytes32 t2, bytes32 t3) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).addComment(address(tx.origin), block.number, t1, t2, t3);\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveUp(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveUp(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function giveDown(address post_address) constant returns (bool) {\n        for( uint z = 0; z < users.size; z ++)\n            if (User(users.array[z]).getOwner() == address(tx.origin))\n                for( uint i = 0; i < posts.size; i ++)\n                    if (posts.array[i] == post_address){\n                        Post(posts.array[i]).giveDown(address(tx.origin));\n                        return true;\n                    }\n        return false;\n    }\n\n    function createPost(address _user, address _board, bytes32 _title, bytes32 _image, bytes32 c1, bytes32 c2, bytes32 c3, bytes32 c4, bytes32 c5, bytes32 c6, bytes32 c7, bytes32 c8) returns (bool) {\n        if (User(address(_user)).getOwner() == address(tx.origin)){\n            Post newPost = new Post(address(tx.origin), address(_user), _board, _title, _image, c1, c2, c3, c4, c5, c6, c7, c8);\n            Board(address(_board)).addPostOnBoard(address(_user), address(newPost));\n            Post(address(newPost)).setIds(posts.size, block.number);\n            User(address(_user)).addPostOnUser(address(newPost));\n            posts.array[posts.size] = address(newPost);\n            posts.size ++;\n            return true;\n        }\n        return false;\n    }\n\n    function removePost(address post_address) returns (bool) {\n        for( uint i = 0; i < posts.size; i ++)\n            if ((posts.array[i] == post_address) && (Post(posts.array[i]).getOwner() == address(tx.origin)) )\n                for( uint z = 0; z < users.size; z ++)\n                    if (User(users.array[z]).getOwner() == address(tx.origin)){\n                        Board(Post(posts.array[i]).getBoard()).removePost(post_address);\n                        User(users.array[z]).removePost(post_address);\n                        if (i == (posts.size-1)){\n                            delete posts.array[i];\n                        } else {\n                            for(z = i; z < posts.size; z ++)\n                                posts.array[z] = posts.array[z+1];\n                            delete posts.array[posts.size-1];\n                        }\n                        posts.size --;\n                        return true;\n                    }\n        return false;\n    }\n\n}\n","language":"Solidity","languageVersion":"0.3.0","compilerVersion":"0.3.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /tmp/solc657640558","abiDefinition":[{"constant":true,"inputs":[{"name":"board_address","type":"address"}],"name":"addBoard","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"getData","outputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"getPost","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"i","type":"uint256"}],"name":"getBoard","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"post_address","type":"address"}],"name":"addPostOnUser","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"getUsername","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[{"name":"board_address","type":"address"}],"name":"removeBoard","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"post_address","type":"address"}],"name":"removePost","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[],"name":"getProfile","outputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes10"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_name","type":"bytes32"},{"name":"_email","type":"bytes32"},{"name":"_imageurl","type":"bytes32"},{"name":"_birth","type":"bytes10"},{"name":"_location","type":"bytes32"},{"name":"_url1","type":"bytes32"},{"name":"_url2","type":"bytes32"}],"name":"edit","outputs":[{"name":"","type":"bool"}],"type":"function"},{"inputs":[{"name":"_owner","type":"address"},{"name":"_username","type":"bytes32"}],"type":"constructor"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}